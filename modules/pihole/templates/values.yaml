# Default values for pihole.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

serviceWeb:
  http:
    enabled: true
  https:
    enabled: true

serviceDns:
  loadBalancerIP: ${metallb_pihole_ip}
  annotations:
    metallb.universe.tf/allow-shared-ip: pihole-svc
  type: LoadBalancer

serviceDhcp:
  enabled: false

ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-issuer
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/app-root: /admin
  path: /
  hosts:
    # virtualHost (default value is pi.hole) will be appended to the hosts
    - ${ingress_host}
  tls:
  - secretName: ${tls_secret}
    hosts:
    #- virtualHost (default value is pi.hole) will be appended to the hosts
      - ${ingress_host}

persistentVolumeClaim:
  # set to true to use pvc
  enabled: false
  # set to true to use you own pvc
  # existingClaim: myExistingClaim
  annotations: {}

  accessModes:
    - ReadWriteOnce
  size: "500Mi"
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "local-storage"

  ## If subPath is set mount a sub folder of a volume instead of the root of the volume.
  ## This is especially handy for volume plugins that don't natively support sub mounting (like glusterfs).

  # subPath: "pihole"

nodeSelector: {}

tolerations: []

affinity: {}

# Use an existing secret for the admin password.
admin:
  existingSecret: ${secret_name}
  passwordKey: "password"

# extraEnvironmentVars is a list of extra enviroment variables to set for pihole to use
extraEnvVars:
  TZ: "Europe/Oslo"

# -- default upstream DNS 1 server to use
DNS1: "1.1.1.2"
# -- default upstream DNS 2 server to use
DNS2: "8.8.8.8"

antiaff:
  # set to true to enable antiaffinity (example: 2 pihole DNS in the same cluster)
  enabled: false
  # Here you can set the pihole release (you set in `helm install <releasename> ...`)
  # you want to avoid
  avoidRelease: pihole1
  # Here you can choose between preferred or required
  strict: true

dnsmasq:
  upstreamServers:
  # Here you can add upstream dns servers with. All lines will be added to the
  # pihole dnsmasq configuration.
  # The format should be like:
  # - server=/foo.bar/192.168.178.10
  # - server=/bar.foo/192.168.178.11

  customDnsEntries: []
  # Here you can add custom dns entries to override the
  # dns resolution with. All lines will be added to the
  # pihole dnsmasq configuration.
  # The format should be like:
  # - address=/foo.bar/192.168.178.10
  # - address=/bar.foo/192.168.178.11

  additionalHostsEntries: []
  # Dnsmasq reads the /etc/hosts file to resolve ips. You can add additional entries if you like
  # - 192.168.0.3     host4
  # - 192.168.0.4     host5

  staticDhcpEntries: []
  # Static DHCP config
  # staticDhcpEntries:
  # - dhcp-host=MAC_ADDRESS,IP_ADDRESS,HOSTNAME

adlists: {}
  # If you want to provide blocklists, add them here.
  # - https://hosts-file.net/grm.txt
  # - https://reddestdream.github.io/Projects/MinimalHosts/etc/MinimalHostsBlocker/minimalhosts

whitelist: {}
  # If you want to have special domains whitelisted, add them here
  # - *.whitelist.com

blacklist: {}
  # If you want to have special domains blacklisted, add them here
  # - *.blackist.com

regex: {}
  # Add regular expression blacklist items
  # - (^|\.)facebook\.com$

ftl: {}
  # Add values for pihole-FTL.conf
  # MAXDBDAYS: 14

# -- should container run in privileged mode
privileged: "false"

monitoring:
  podMonitor:
    enabled: true
  sidecar:
    enabled: true
    port: 9617
    resources:
      limits:
        memory: 128Mi
      # requests:
      #  cpu: 100m
      #  memory: 128Mi

podDnsConfig:
  enabled: true
  policy: "None"
  nameservers:
  - 127.0.0.1
  - 1.1.1.2
