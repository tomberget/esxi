commonLabels:
  prometheus: default

alertmanager:
  service:
    type: ClusterIP
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-issuer
    ingressClassName: nginx
    hosts:
    - ${alertmanager_ingress_host}
    paths: ["/"]
    tls:
    - hosts:
      - ${alertmanager_ingress_host}
      secretName: ${alertmanager_tls_name}

  alertmanagerSpec:
    externalUrl: ""
    routePrefix: /
    retention: 720h
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: local-storage
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi

prometheusOperator:
  createCustomResource: ${prometheus_operator_create_crd}
  configReloaderCpu: 130m
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 700m
      memory: 256Mi
  tlsProxy:
    resources:
      limits:
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 50Mi
  admissionWebhooks:
    patch:
      podAnnotations:
        sidecar.istio.io/inject: "false"

prometheus:
  service:
    type: ClusterIP
  prometheusSpec:
    externalUrl: ""
    routePrefix: /
    retention: 30d
    retentionSize: 10GB
    additionalScrapeConfigs:
      - job_name: 'envoy-stats'
        metrics_path: /stats/prometheus
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: '.*-envoy-prom'
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:15090
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod_name
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
      # matchLabels:
      #   prometheus: default
    ruleSelector: {}
      # matchLabels:
      #   alertmanager: default
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: local-storage
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-issuer
    ingressClassName: nginx
    hosts:
    - ${prometheus_ingress_host}
    paths: ["/"]
    tls:
    - hosts:
      - ${prometheus_ingress_host}
      secretName: ${prometheus_tls_name}

grafana:
  enabled: true
  rbac:
    create: true
  adminUser: admin
  adminPassword: ${grafana_password}
  grafana.ini:
    auth.anonymous:
      enabled: true
      org_name: ${grafana_org_name}
  persistence:
    enabled: true
    storageClassName: local-storage
    accessModes:
      - ReadWriteOnce
    size: 7Gi
  env:
    GF_AUTH_ANONYMOUS_ENABLED: "true"
    GF_AUTH_ANONYMOUS_ORG_NAME: ${grafana_org_name}
    GF_AUTH_ANONYMOUS_ORG_ROLE: Editor
  initChownData:
    enabled: false
  service:
    type: ClusterIP
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      searchNamespace: ALL
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-issuer
    ingressClassName: nginx
    hosts:
    - ${grafana_ingress_host}
    paths: ["/"]
    tls:
    - hosts:
      - ${grafana_ingress_host}
      secretName: ${grafana_tls_name}

kubeProxy:
  enabled: false
kubeScheduler:
  enabled: false
kubeApi:
  enabled: false
kubeControllerManager:
  enabled: false
kubeEtcd:
  enabled: false
